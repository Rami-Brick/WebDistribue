import { Component, OnInit } from '@angular/core';
import { routes } from 'src/app/core/helpers/routes/routes';
import {ActivatedRoute, Router} from '@angular/router';
import { Espaces } from '../../../../model/Espaces';
import { EspacesService } from '../../../service/Espaces/espaces.service';
import {Reservation} from "../../../service/reservation-module/Reservation";
import {ReservationService} from "../../../service/reservation-module/reservation.service";
import {FormBuilder, FormGroup, Validators} from "@angular/forms";
import Swal from 'sweetalert2';
import { jsPDF } from 'jspdf';


@Component({
  selector: 'app-reservation-espace',
  templateUrl: './reservation-espace.component.html',
  styleUrls: ['./reservation-espace.component.scss']
})
export class ReservationEspaceComponent implements OnInit {


  public routes = routes;
  selectedValue!: string;
  reservation: any;
  public reservationForm: FormGroup;

  public espace: Espaces = {
    nom: '',
    description: '',
    adresse: '',
    latitude: 0,
    longitude: 0,
    capacite: 0,
    tarif: 0,
    disponibilite: false,
    photos: [],
  };


  private idEspace: any;

  constructor(
    private fb: FormBuilder,
    private route: ActivatedRoute,
    private router: Router,
    private espacesService: EspacesService,
    private reservationService: ReservationService,
  ) {
    this.reservationForm = this.fb.group({
      eventName: ['', Validators.required],
      eventDate: ['', Validators.required],
      eventTime: ['', Validators.required],
      numberOfGuests: ['', Validators.required],
      decorationPack: ['', Validators.required],
      additionalNotes: [''],
      organization: ['']
    });
  }


  ngOnInit(): void {
    this.route.params.subscribe(params => {
      this.idEspace = params['id'];
      this.fetchEspaceById();
    });
  }

  private async fetchEspaceById(): Promise<void> {
    try {
      const espacesObservable = await this.espacesService.getEspaceById(this.idEspace);
      espacesObservable.subscribe(
        (data: Espaces) => {
          this.espace = data;
          console.log('Espaces:', this.espace);
        },
        (error) => {
          console.error('Error fetching espaces:', error);
        }
      );
    } catch (error) {
      console.error('Error in fetchEspaces:', error);
    }
  }
  onSubmit(): void {
    if (this.reservationForm.valid) {
      const reservation: Reservation = {
        ...this.reservationForm.value,
        espace: this.espace
      };
      this.reservationService.createReservation(reservation, this.idEspace).subscribe(
        response => {
          console.log('Reservation created successfully:', response);
          Swal.fire({
            icon: 'success',
            title: 'Reservation Created',
            text: 'Your reservation has been created successfully!',
            showConfirmButton: true,
            confirmButtonText: 'Generate PDF',
            preConfirm: () => {
              this.generatePDF();
            }
          }).then(() => {
            this.router.navigate(['/Reservation']);
          });
        },
        error => {
          console.error('Error creating reservation:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'There was an error creating your reservation. Please try again.',
          });
        }
      );
    }
  }

  generatePDF(): void {
    const doc = new jsPDF();

    // Add a title with a larger font size
    doc.setFontSize(22);
    doc.setTextColor(40, 40, 40);
    doc.text('Reservation Details', 10, 20);

    // Add a horizontal line below the title
    doc.setLineWidth(0.5);
    doc.line(10, 25, 200, 25);

    // Set font size for the content
    doc.setFontSize(12);
    doc.setTextColor(60, 60, 60);

    // Add reservation details with some spacing
    const details = [
      `Event Name: ${this.reservationForm.value.eventName}`,
      `Event Date: ${this.reservationForm.value.eventDate}`,
      `Event Time: ${this.reservationForm.value.eventTime}`,
      `Number of Guests: ${this.reservationForm.value.numberOfGuests}`,
      `Decoration Pack: ${this.reservationForm.value.decorationPack}`,
      `Additional Notes: ${this.reservationForm.value.additionalNotes}`,
      `Organization: ${this.reservationForm.value.organization}`
    ];

    let yPosition = 35;
    details.forEach(detail => {
      doc.text(detail, 10, yPosition);
      yPosition += 10;
    });

    // Add a footer
    doc.setFontSize(10);
    doc.setTextColor(100, 100, 100);
    doc.text('Generated by Reservation System', 10, 290);

    // Save the PDF
    doc.save('reservation-details.pdf');
  }
}
